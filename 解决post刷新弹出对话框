4.5　重定向和用户会话
最新版的 hello.py 存在一个可用性问题。用户输入名字后提交表单，然后点击浏览器的刷
新按钮，会看到一个莫名其妙的警告，要求在再次提交表单之前进行确认。之所以出现这
种情况，是因为刷新页面时浏览器会重新发送之前已经发送过的最后一个请求。如果这个
请求是一个包含表单数据的 POST 请求，刷新页面后会再次提交表单。大多数情况下，这并
不是理想的处理方式。
很多用户都不理解浏览器发出的这个警告。基于这个原因，最好别让 Web 程序把 POST 请
求作为浏览器发送的最后一个请求。
这种需求的实现方式是，使用重定向作为 POST 请求的响应，而不是使用常规响应。重定
向是一种特殊的响应，响应内容是 URL，而不是包含 HTML 代码的字符串。浏览器收到
这种响应时，会向重定向的 URL 发起 GET 请求，显示页面的内容。这个页面的加载可能
要多花几微秒，因为要先把第二个请求发给服务器。除此之外，用户不会察觉到有什么不
同。现在，最后一个请求是 GET 请求，所以刷新命令能像预期的那样正常使用了。这个技
巧称为 Post/ 重定向 /Get 模式。
但这种方法会带来另一个问题。程序处理 POST 请求时，使用 form.name.data 获取用户输
入的名字，可是一旦这个请求结束，数据也就丢失了。因为这个 POST 请求使用重定向处
理，所以程序需要保存输入的名字，这样重定向后的请求才能获得并使用这个名字，从而
40 ｜ 第 4 章
构建真正的响应。
程序可以把数据存储在用户会话中，在请求之间“记住”数据。用户会话是一种私有存
储，存在于每个连接到服务器的客户端中。我们在第 2 章介绍过用户会话，它是请求上下
文中的变量，名为 session ，像标准的 Python 字典一样操作。
默认情况下，用户会话保存在客户端 cookie 中，使用设置的 SECRET_KEY 进
行加密签名。如果篡改了 cookie 中的内容，签名就会失效，会话也会随之
失效。
示例 4-5 是 index() 视图函数的新版本，实现了重定向和用户会话。
示例 4-5　hello.py：重定向和用户会话
from flask import Flask, render_template, session, redirect, url_for
@app.route('/', methods=['GET', 'POST'])
def index():
form = NameForm()
if form.validate_on_submit():
session['name'] = form.name.data
return redirect(url_for('index'))
return render_template('index.html', form=form, name=session.get('name'))
在程序的前一个版本中，局部变量 name 被用于存储用户在表单中输入的名字。这个变量现
在保存在用户会话中，即 session['name'] ，所以在两次请求之间也能记住输入的值。
现在，包含合法表单数据的请求最后会调用 redirect() 函数。 redirect() 是个辅助函数，
用来生成 HTTP 重定向响应。 redirect() 函数的参数是重定向的 URL，这里使用的重定向
URL 是程序的根地址，因此重定向响应本可以写得更简单一些，写成 redirect('/') ，但
却会使用 Flask 提供的 URL 生成函数 url_for() 。推荐使用 url_for() 生成 URL，因为这
个函数使用 URL 映射生成 URL，从而保证 URL 和定义的路由兼容，而且修改路由名字后
依然可用。
url_for() 函数的第一个且唯一必须指定的参数是端点名，即路由的内部名字。默认情
况下，路由的端点是相应视图函数的名字。在这个示例中，处理根地址的视图函数是
index() ，因此传给 url_for() 函数的名字是 index 。
最后一处改动位于 render_function() 函数中，使用 session.get('name') 直接从会话中读
取 name 参数的值。和普通的字典一样，这里使用 get() 获取字典中键对应的值以避免未找
到键的异常情况，因为对于不存在的键， get() 会返回默认值 None 。
