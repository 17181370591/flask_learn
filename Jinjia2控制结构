3.1.3　控制结构
Jinja2 提供了多种控制结构，可用来改变模板的渲染流程。本节使用简单的例子介绍其中
最有用的控制结构。
下面这个例子展示了如何在模板中使用条件控制语句：
{% if user %}
Hello, {{ user }}!
{% else %}
Hello, Stranger!
{% endif %}
另一种常见需求是在模板中渲染一组元素。下例展示了如何使用 for 循环实现这一需求：
<ul>
{% for comment in comments %}
<li>{{ comment }}</li>
{% endfor %}
</ul>
Jinja2 还支持宏。宏类似于 Python 代码中的函数。例如：
{% macro render_comment(comment) %}
<li>{{ comment }}</li>
{% endmacro %}
<ul>
{% for comment in comments %}
{{ render_comment(comment) }}
{% endfor %}
</ul>
为了重复使用宏，我们可以将其保存在单独的文件中，然后在需要使用的模板中导入：
{% import 'macros.html' as macros %}
<ul>
{% for comment in comments %}
{{ macros.render_comment(comment) }}
{% endfor %}
</ul>
`
需要在多处重复使用的模板代码片段可以写入单独的文件，再包含在所有模板中，以避免
重复：
{% include 'common.html' %}
另一种重复使用代码的强大方式是模板继承，它类似于 Python 代码中的类继承。首先，创
建一个名为 base.html 的基模板：
模板 ｜ 23
<html>
<head>
{% block head %}
<title>{% block title %}{% endblock %} - My Application</title>
{% endblock %}
</head>
<body>
{% block body %}
{% endblock %}
</body>
</html>
block 标签定义的元素可在衍生模板中修改。在本例中，我们定义了名为 head 、 title 和
body 的块。注意， title 包含在 head 中。下面这个示例是基模板的衍生模板：
{% extends "base.html" %}
{% block title %}Index{% endblock %}
{% block head %}
{{ super() }}
<style>
</style>
{% endblock %}
{% block body %}
<h1>Hello, World!</h1>
{% endblock %}
extends 指令声明这个模板衍生自 base.html。在 extends 指令之后，基模板中的 3 个块被
重新定义，模板引擎会将其插入适当的位置。注意新定义的 head 块，在基模板中其内容不
是空的，所以使用 super() 获取原来的内容。
_____________________________________________________________________
示例 3-7　templates/base.html：包含导航条的程序基模板
{% extends "bootstrap/base.html" %}
{% block title %}Flasky{% endblock %}
{% block navbar %}
<div class="navbar navbar-inverse" role="navigation">
<div class="container">
<div class="navbar-header">
<button type="button" class="navbar-toggle"
data-toggle="collapse" data-target=".navbar-collapse">
<span class="sr-only">Toggle navigation</span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button>
<a class="navbar-brand" href="/">Flasky</a>
</div>
<div class="navbar-collapse collapse">
<ul class="nav navbar-nav">
<li><a href="/">Home</a></li>
</ul>
</div>
</div>
</div>
{% endblock %}
{% block content %}
<div class="container">
{% block page_content %}{% endblock %}
</div>
{% endblock %}
这个模板的 content 块中只有一个 <div> 容器，其中包含了一个名为 page_content 的新的
空块，块中的内容由衍生模板定义。
现在，程序使用的模板继承自这个模板，而不直接继承自 Flask-Bootstrap 的基模板。通过
继承 templates/base.html 模板编写自定义的 404 错误页面很简单，如示例 3-8 所示。
28 ｜ 第 3 章
示例 3-8　templates/404.html：使用模板继承机制自定义 404 错误页面
{% extends "base.html" %}
{% block title %}Flasky - Page Not Found{% endblock %}
{% block page_content %}
<div class="page-header">
<h1>Not Found</h1>
</div>
{% endblock %}
错误页面在浏览器中的显示效果如图 3-2 所示。
图 3-2　自定义的 404 错误页面
templates/user.html 现在可以通过继承这个基模板来简化内容，如示例 3-9 所示。
示例 3-9　templates/user.html：使用模板继承机制简化页面模板
{% extends "base.html" %}
{% block title %}Flasky{% endblock %}
{% block page_content %}
<div class="page-header">
<h1>Hello, {{ name }}!</h1>
</div>
{% endblock %}
